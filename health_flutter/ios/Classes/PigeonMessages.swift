// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Enum representing permission levels.
enum PermissionType: Int {
  case read = 0
  case write = 1
  case readWrite = 2
}

/// Enum representing health units.
enum HealthUnit: Int {
  case kilocalorie = 0
  /// In celsius.
  case degree = 1
}

/// Enum representing health data types.
/// **Important**: Order of this enum is respected on native platforms.
///
/// Please keep it in alphabetical order on every platform.
enum HealthDataType: Int {
  case activeEnergyBurned = 0
  case basalBodyTemperature = 1
  case basalEnergyBurned = 2
}

/// Helper object to group `HealthDataType` and `PermissionType` together.
///
/// Generated class from Pigeon that represents data sent in messages.
struct HealthPermission {
  var dataType: HealthDataType
  var permissionType: PermissionType

  static func fromList(_ list: [Any?]) -> HealthPermission? {
    let dataType = HealthDataType(rawValue: list[0] as! Int)!
    let permissionType = PermissionType(rawValue: list[1] as! Int)!

    return HealthPermission(
      dataType: dataType,
      permissionType: permissionType
    )
  }
  func toList() -> [Any?] {
    return [
      dataType.rawValue,
      permissionType.rawValue,
    ]
  }
}

private class HealthApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return HealthPermission.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class HealthApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HealthPermission {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HealthApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HealthApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HealthApiCodecWriter(data: data)
  }
}

class HealthApiCodec: FlutterStandardMessageCodec {
  static let shared = HealthApiCodec(readerWriter: HealthApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HealthApi {
  func checkAvailability() throws -> Bool
  func canRequestPermissions(permissions: [HealthPermission], completion: @escaping (Result<Bool, Error>) -> Void)
  func requestPermissions(permissions: [HealthPermission], completion: @escaping (Result<Bool, Error>) -> Void)
  func getDataForType(type: HealthDataType, startDateMillisecondsSinceEpoch: Int64, endDateMillisecondsSinceEpoch: Int64, completion: @escaping (Result<[[AnyHashable: Any?]], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HealthApiSetup {
  /// The codec used by HealthApi.
  static var codec: FlutterStandardMessageCodec { HealthApiCodec.shared }
  /// Sets up an instance of `HealthApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HealthApi?) {
    let checkAvailabilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.health_flutter.HealthApi.checkAvailability", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkAvailabilityChannel.setMessageHandler { _, reply in
        do {
          let result = try api.checkAvailability()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      checkAvailabilityChannel.setMessageHandler(nil)
    }
    let canRequestPermissionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.health_flutter.HealthApi.canRequestPermissions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canRequestPermissionsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let permissionsArg = args[0] as! [HealthPermission]
        api.canRequestPermissions(permissions: permissionsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      canRequestPermissionsChannel.setMessageHandler(nil)
    }
    let requestPermissionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.health_flutter.HealthApi.requestPermissions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let permissionsArg = args[0] as! [HealthPermission]
        api.requestPermissions(permissions: permissionsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionsChannel.setMessageHandler(nil)
    }
    let getDataForTypeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.health_flutter.HealthApi.getDataForType", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDataForTypeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = HealthDataType(rawValue: args[0] as! Int)!
        let startDateMillisecondsSinceEpochArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let endDateMillisecondsSinceEpochArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.getDataForType(type: typeArg, startDateMillisecondsSinceEpoch: startDateMillisecondsSinceEpochArg, endDateMillisecondsSinceEpoch: endDateMillisecondsSinceEpochArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDataForTypeChannel.setMessageHandler(nil)
    }
  }
}
